###############
# UPLOAD DATA #
###############

data_tooltips = """
ProteusAI is an open-source platform that demoncratizes access to advanced ML tools for protein engineering by providing a 
user-friendly interface. This interface streamlines a variety protein engineering tasks, including
protein clustering, ML-guided structure design and deploying large protein language models (PLMs) to identify beneficial 
mutations. These modules can be used together or as standalone tools. Our benchmarking results demonstrate ProteusAIâ€™s efficiency
in improving proteins and enzymes within a just few iterations. ProteusAI is freely available for academic and commercial use.
Get started by uploading a dataset or select the "Use Demo Data" option. Click on the module tabs to learn about their
functionality and the expected data types.
"""

data_unlabelled_datasets_tooltip = """
Upload this file under the "Sequence" tab. These sequences can be visualised on a 2D plot in which more similar sequences 
appear closer together, allowing you to identify 
clusters within the sequence set (Compute Representations Module). If you would like to sample the sequences but
are unsure which subset would be most representative, ProteusAI can also recommend the most representative combination of
sequences given an input sample size (Discovery Module).
"""

data_continuous_datasets_tooltip = """
Upload this file under the 'Library' tab. The continuous variable could be the protein's melting temperature, Kcat or specifity. 
Make sure to select the 'numeric' data type. This data can be used to train ML models to predict the continuous
variable and design improved sequences (MLDE Module) or to visualise the continuous variable mapped onto sequence space (Compute
Representations Module).
"""

data_catagorical_datasets_tooltip = """
Upload this file under the 'Library' tab. The catagorical variable could enzyme class, origin species or EC number. Make sure 
to select the 'Catagorical' data type. This data can be used to train clustering models to labele new sequences in the dataset 
(Discovery Module), allowing you to predict the class to which new sequences belong. These sequences can be visualised on a 2D 
plot in which more similar sequences appear closer together, sequences are annotated with the catagorical data, allowing you to
spot and analyse clusters (Compute Representations Module).
"""

data_fasta_tooltip = """
Previously trained large language models can use this sequence to calculate Zero-Shot scores can be calculated for every 
possible amino acid change in the sequence. Zero-Shot scores allow you to identify beneficial mutantions without any prior data 
(Compute Zero-Shots Module).
"""

data_structure_tooltip = """
This structure can be used to design novel sequences with a high probability of adopting the same fold (Structure Design Module).
There is the option to fix essential residues to improve the probability of maintaining activity. The sequence is also extracted 
and can be used in to calculate Zero-Shot scores (Compute Zero-Shot Module).
"""

###############
## ZERO-SHOT ##
###############

zs_file_type = """
The Zero-Shot module needs a protein sequence input. Use the "Sequence" tab to upload a protein sequence in .fasta 
format or use the "Structure" tab to upload a PDB file, from which the sequence will be extracted.
"""

zs_tooltips = """
The ProteusAI Zero-Shot Module helps you design a mutant library with no prior data.
The module uses scores generated by large protein language models, such as ESM-1v, that have
been trained to predict the probability of each amino acid at each position of a protein across hundreds 
of millions of protein sequences. These probabilities are called "Zero Shot Scores".
Often, you will find that several residues in your protein sequence have low predicted probabilities, which
suggests the model has not often seen this amino acid in this sequence context. Swapping these residues for 
residues with higher probabilities can be beneficial for stability, expression or activity. ProteusAI, 
provides access to several language models and, currently, the best models are ESM-1v and ESM-2 (650M). 
However, these models take a long time to compute the results. Consider using ESM-2 (35M) to get familiar 
with the module before moving to the larger models.
"""

zs_entropy_tooltips = """
This plot shows the entropy values across the protein sequence, providing insights into the diversity tolerated at each position.
The higher the entropy, the great the variety of amino acids tolerated at the position.
"""

zs_heatmap_tooltips = """
This heatmap visualizes the computed zero-shot scores for the protein. The scores at each position are normalised to the score 
of the original amino acid, which is set to zero (white) and highlighted by a black box. A positive score (blue) indicates that mutating the position to that amino acid could
have beneficial effects, while a negative score (red) indicates the mutation would not be favourable.
"""

###############
## DISCOVERY ##
###############

discovery_file_type = """
Upload a CSV or EXCEL file in the 'Upload Data' tab under 'Library' to proceed with the Discovery module.
The file should contain a column for protein sequences, a column with the protein names, and a column for
annotations, which can also be empty or partially populated with annotations.
"""

discovery_tooltips = """
The Discovery Module helps you analyse of large sets of unannotated or partically annotated protein sequences, 
ideal for when you are starting a project with little to no experimental data. For example, a BLAST search has 
returned 1000 candidate protein sequences but you are not sure which to test. This module creates plots in 
which similar sequences appear close together, allowing you to identify functional hotspots in sequence space 
and select new candidate sequences. If you are unsure which subset of your sequences are most 
representative of the overall set, the "Search" function in this module will provide a list. You can then
test these sequences and upload an annotated dataset to identify functional hotspots.

Clustering should be used if all, very few, or no sequences have annotations.
Classification should be used if some or all sequences are annotated. To find out if you have enough
sequences for classification, we recommend using the model statistics on the validation set, which are
automatically generated by the module after training.
"""

###############
#### MLDE #####
###############

mlde_file_type = """
Upload a CSV or EXCEL file in the 'Upload Data' tab under 'Library' to proceed with the MLDE module.
The file should contain a column for protein sequences, a column with the protein names (e.g.,
mutant descriptions M15V), and a column for experimental values (e.g., enzyme activity,
fluorescence, etc.).
"""

mlde_tooltips = """
The Machine Learning-Guided Directed Evolution (MLDE) module helps you improve your target protein property through 
iterative mutagenesis. Here, you can use your experimental results train machine learning models to predict your target 
protein property from a sequence input. Once your model is trained, the "Design" function will generate mutant sequences
predicted to be improved in your property. There is also an option to output sequences that would most improve the model
if included in the dataset, improving the accuracy of future results.
"""

###############
### DESIGN ####
###############


design_file_type = """
Upload a PDB file containing the structure of the protein
to use the (structure-based) Design module.
"""

design_tooltips = """
The Protein Design module helps you identify novel sequences with a high probability of folding into the input structure.
This can be useful for identifying diverse sequences with a similar function, which can help you to escape local optima 
when optimising a protein. Often, the novel sequences have improved thermal stability and solubility compared to the natural
sequence. To preserve important functions of the protein, we recommend the fixing of protein-protein and ligand-protein 
interfaces, as well as evolutionarily conserved sites, which will prevent the amino acids from being changed during the 
design process. The temperature factor influences the diversity of designs. We recommend rigorous filtering before synthesising 
variants for experimental validation. For example, sort the sequences from the lowest to highest score, predict the structure 
of the lowest-scoring variants (e.g. using AlphaFold3) and proceed with the designs that preserve the geometry of the active 
site.
"""

#####################
## REPRESENTATIONS ##
#####################


representations_tooltips = """
The Representations module helps you compute and visualize vector representations of proteins. These are primarily
used by the MLDE and Discovery modules to make training more data-efficient. The representations can be generated from
classical algorithms such as BLOSUM62 or from large protein language models that infuse helpful inductive biases into protein
sequence representations. In some cases, the representations can be used to cluster proteins based on function or to
predict protein properties. The module offers several visualization techniques to explore the representations and to
understand the underlying structure of the protein data. Advanced analysis and predictions can be made by using the
MLDE or Discovery modules in combination with the Representations module.
"""
